name: Mirror marketing repo to GCS

on:
  workflow_dispatch:
  push:
    branches: ["**"]
    paths:
      - ".github/workflows/upload-sql-to-gcs.yml"
      - "**"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions: { contents: read }

    env:
      PROJECT_ID: quick-platform-466015-d5
      GCS_BUCKET: gs://test-git-actions

    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gsutil

      - name: Mirror to GCS (repo/subrepo structure)
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob

          REPO_NAME="${GITHUB_REPOSITORY##*/}"              # e.g., "marketing"
          DEST_ROOT="${GCS_BUCKET%/}/${REPO_NAME}"
          echo "Repo: $REPO_NAME"
          echo "GCS root: $DEST_ROOT"

          # subrepos are first-level dirs at repo root (exclude .git and .github)
          subrepos=()
          for d in */ ; do
            [[ -d "$d" ]] || continue
            base="${d%/}"
            [[ "$base" == ".git" || "$base" == ".github" ]] && continue
            subrepos+=( "$base" )
          done
          echo "Found subrepos: ${subrepos[*]:-<none>}"
          [[ ${#subrepos[@]} -gt 0 ]] || { echo "Nothing to sync."; exit 0; }

          # 1) Sync DAGs to gs://bucket/<repo>/<sub>/dags
          for sub in "${subrepos[@]}"; do
            src="$sub/dags"
            dst="$DEST_ROOT/$sub/dags"
            if [[ -d "$src" ]]; then
              echo "Syncing DAGs: $src -> $dst"
              gsutil -m rsync -d -r "$src" "$dst"
            else
              echo "No DAGs in $sub — removing if exists: $dst"
              gsutil -m rm -r "$dst" 2>/dev/null || true
            fi
          done

          # 2) Sync every other folder under each subrepo (sql, ddl, configs, etc.)
          for sub in "${subrepos[@]}"; do
            for dir in "$sub"/*; do
              [[ -d "$dir" ]] || continue
              folder="$(basename "$dir")"
              [[ "$folder" == "dags" ]] && continue
              dst="$DEST_ROOT/$sub/$folder/"
              echo "Syncing $dir -> $dst"
              gsutil -m rsync -d -r "$dir" "$dst"
            done
          done

          # 3) Clean stale subrepo roots in GCS (if a subrepo folder was deleted in Git)
          echo "Cleaning stale subrepos under $DEST_ROOT/ ..."
          while IFS= read -r gcs_path; do
            [[ -n "$gcs_path" ]] || continue
            gsub="$(echo "$gcs_path" | sed 's:/*$::' | awk -F/ '{print $NF}')"
            keep=false
            for sub in "${subrepos[@]}"; do
              if [[ "$sub" == "$gsub" ]]; then keep=true; break; fi
            done
            if [[ "$keep" == false ]]; then
              echo "Deleting stale subrepo path: $gcs_path"
              gsutil -m rm -r "$gcs_path" || true
            fi
          done < <(gsutil ls -d "$DEST_ROOT/"* 2>/dev/null || true)

          echo "Final listing:"
          gsutil ls -r "$DEST_ROOT/" || true
          echo "✅ Done."
