name: Upload files to GCS

on:
  workflow_dispatch:
  push:
    paths:
      - 'test-git-hub-actions/**'

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      BUCKET: gs://quick-platform-466015-d5/test-git-actions
      REPO_ROOT: test-git-hub-actions/

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Option A: Service account key (store JSON in GitHub secret GCP_SA_KEY)
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: quick-platform-466015-d5
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Option B (preferred): Workload Identity Federation
      # - uses: google-github-actions/auth@v2
      #   with:
      #     workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      #     service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      #     project_id: quick-platform-466015-d5
      # - uses: google-github-actions/setup-gcloud@v2

      - name: Verify gsutil
        run: gsutil --version

      - name: Sync DAGs and data to GCS
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob

          command -v gsutil >/dev/null || { echo "ERROR: gsutil not found"; exit 1; }

          echo "Using BUCKET=${BUCKET}"
          echo "Using REPO_ROOT=${REPO_ROOT}"

          # Collect subrepos present in Git under REPO_ROOT
          subrepos=()
          for d in "$REPO_ROOT"/*; do
            [[ -d "$d" ]] || continue
            subrepos+=( "$(basename "$d")" )
          done
          echo "Found subrepos: ${subrepos[*]:-<none>}"

          # 1) Sync DAGs (mirror)
          for sub in "${subrepos[@]}"; do
            src="$REPO_ROOT/$sub/dags"
            dst="$BUCKET/dags/$REPO_ROOT/$sub/dags"
            if [[ -d "$src" ]]; then
              echo "Syncing DAGs: $src -> $dst"
              gsutil -m rsync -d -r "$src" "$dst"
            else
              echo "No DAGs in $REPO_ROOT/$sub — removing GCS dags path if present: $dst"
              gsutil -m rm -r "$dst" 2>/dev/null || true
            fi
          done

          # Remove stale subfolders in GCS DAGs that are not present in Git
          echo "Cleaning stale GCS DAGs under $BUCKET/dags/$REPO_ROOT ..."
          while IFS= read -r gcs_path; do
            [[ -n "$gcs_path" ]] || continue
            # example: gs://.../dags/test-git-hub-actions/<sub>/dags
            gcs_sub=$(echo "$gcs_path" | sed 's:/*$::' | awk -F/ '{print $(NF-1)}')
            keep=false
            for sub in "${subrepos[@]}"; do
              if [[ "$sub" == "$gcs_sub" ]]; then keep=true; break; fi
            done
            if [[ "$keep" == false ]]; then
              echo "Deleting stale DAGs path: $gcs_path"
              gsutil -m rm -r "$gcs_path" || true
            fi
          done < <(gsutil ls -d "$BUCKET/dags/$REPO_ROOT/"*"/dags" 2>/dev/null || true)

          # 2) Sync other folders (everything except DAGs)
          for sub in "${subrepos[@]}"; do
            for dir in "$REPO_ROOT/$sub"/*; do
              [[ -d "$dir" ]] || continue
              folder=$(basename "$dir")
              if [[ "$folder" != "dags" ]]; then
                dst="$BUCKET/data/$REPO_ROOT/$sub/$folder/"
                echo "Syncing $dir -> $dst"
                gsutil -m rsync -d -r "$dir" "$dst"
              fi
            done
          done

          # Remove stale top-level subrepo folders in GCS data not present in Git
          echo "Cleaning stale GCS data under $BUCKET/data/$REPO_ROOT ..."
          while IFS= read -r gcs_path; do
            [[ -n "$gcs_path" ]] || continue
            # example: gs://.../data/test-git-hub-actions/<sub>/
            gcs_sub=$(echo "$gcs_path" | sed 's:/*$::' | awk -F/ '{print $NF}')
            keep=false
            for sub in "${subrepos[@]}"; do
              if [[ "$sub" == "$gcs_sub" ]]; then keep=true; break; fi
            done
            if [[ "$keep" == false ]]; then
              echo "Deleting stale data path: $gcs_path"
              gsutil -m rm -r "$gcs_path" || true
            fi
          done < <(gsutil ls -d "$BUCKET/data/$REPO_ROOT/"* 2>/dev/null || true)

          echo "✅ Sync complete."
