name: Mirror marketing to GCS (Git = source of truth)

on:
  workflow_dispatch:
  push:
    branches: ["**"]
    paths:
      - ".github/workflows/upload-sql-to-gcs.yml"
      - "**"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions: { contents: read }

    env:
      PROJECT_ID: quick-platform-466015-d5
      GCS_BUCKET: gs://test-git-actions
      REPO_NAME: marketing   # gs://bucket/dags/marketing/<subrepo>/**

    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gsutil

      - name: Mirror to GCS (deep delete + deep hygiene)
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x
          trap 'echo "::error::Failed at line $LINENO: $BASH_COMMAND"' ERR
          shopt -s nullglob

          BUCKET="${GCS_BUCKET%/}"
          DAGS_ROOT="${BUCKET}/dags/${REPO_NAME}"
          DATA_ROOT="${BUCKET}/data"
          CONFIG_ROOT="${BUCKET}/config"

          echo "Bucket root: ${BUCKET}"
          base="${BUCKET#gs://}"; base="gs://${base%%/*}"
          if ! gsutil ls -b "${base}" >/dev/null 2>&1; then
            echo "::warning::Cannot stat bucket ${base} (missing or no permission). Continuing..."
          fi

          # ---------- Detect FS root (repo root or marketing/) ----------
          FS_ROOT="."
          if [[ -d "marketing" ]] && find "marketing" -mindepth 1 -maxdepth 1 -type d -print -quit | grep -q .; then
            FS_ROOT="marketing"
          fi
          echo "Detected FS_ROOT=${FS_ROOT}"

          # ---------- Ensure mandatory top-level dirs exist ----------
          echo | gsutil cp - "${BUCKET}/dags/.gcskeep" >/dev/null 2>&1 || true
          echo | gsutil cp - "${BUCKET}/data/.gcskeep" >/dev/null 2>&1 || true

          # ---------- Root hygiene (bucket root): keep ONLY dags/, data/, config/ ----------
          while IFS= read -r top; do
            [[ -z "$top" ]] && continue
            base_name="${top%/}"; base_name="${base_name##*/}"
            if [[ "$base_name" != "dags" && "$base_name" != "data" && "$base_name" != "config" ]]; then
              echo "Deleting stray top-level prefix: $top"
              gsutil -m rm -r "$top" || true
            fi
          done < <(gsutil ls -d "${BUCKET}/*" 2>/dev/null || true)

          # ---------- Optional repo-level config/ ----------
          if [[ -d "config" ]]; then
            gsutil -m rsync -d -r "config" "${CONFIG_ROOT}"
          else
            gsutil -m rm -r "${CONFIG_ROOT}" 2>/dev/null || true
          fi

          # ---------- Discover subrepos under FS_ROOT ----------
          subrepos=()
          while IFS= read -r d; do
            b="$(basename "$d")"
            [[ "$b" == .git || "$b" == .github || "$b" == config || "$b" == .* ]] && continue
            subrepos+=( "$b" )
          done < <(find "$FS_ROOT" -mindepth 1 -maxdepth 1 -type d -print | sort)
          echo "Found subrepos: ${subrepos[*]:-<none>}"
          [[ ${#subrepos[@]} -gt 0 ]] || { echo "Nothing to sync."; exit 0; }

          # helper for FS_ROOT-relative paths
          path_under_fsroot() { echo "${FS_ROOT%/}/$1"; }

          # ---------- 1) Mirror DAGs ----------
          for sub in "${subrepos[@]}"; do
            src="$(path_under_fsroot "$sub")/dags"
            dst="${DAGS_ROOT}/${sub}"
            if [[ -d "$src" ]]; then
              gsutil -m rsync -d -r "$src" "$dst"
            else
              gsutil -m rm -r "$dst" 2>/dev/null || true
            fi
          done

          # Prune stale DAG subrepos (anything not in Git)
          while IFS= read -r gcs_path; do
            [[ -z "$gcs_path" ]] && continue
            gsub="${gcs_path%/}"; gsub="${gsub##*/}"
            keep=false; for sub in "${subrepos[@]}"; do [[ "$sub" == "$gsub" ]] && keep=true && break; done
            if [[ "$keep" == false ]]; then gsutil -m rm -r "$gcs_path" || true; fi
          done < <(gsutil ls -d "${DAGS_ROOT}/*" 2>/dev/null || true)

          # DEEP hygiene in dags/: allow only dags/${REPO_NAME}/** (and dags/.gcskeep)
          while IFS= read -r uri; do
            [[ -z "$uri" ]] && continue
            # keep keeper file
            [[ "$uri" == "${BUCKET}/dags/.gcskeep" ]] && continue
            case "$uri" in
              "${DAGS_ROOT}/"* ) : ;;   # allowed
              * )
                echo "Deleting stray under dags/: $uri"
                gsutil -m rm -r "$uri" || true
                ;;
            esac
          done < <(gsutil ls -r "${BUCKET}/dags/**" 2>/dev/null || true)

          # ---------- 2) Mirror DATA (deep delete for all non-dags) ----------
          for sub in "${subrepos[@]}"; do
            gsutil -m rsync -d -r -x '(^|/)dags(/|$)' "$(path_under_fsroot "$sub")" "${DATA_ROOT}/${sub}/"
          done

          # Prune stale DATA subrepos (anything not in Git)
          while IFS= read -r gpath; do
            [[ -z "$gpath" ]] && continue
            gsub="${gpath%/}"; gsub="${gsub##*/}"
            keep=false; for sub in "${subrepos[@]}"; do [[ "$sub" == "$gsub" ]] && keep=true && break; done
            if [[ "$keep" == false ]]; then gsutil -m rm -r "$gpath" || true; fi
          done < <(gsutil ls -d "${DATA_ROOT}/*" 2>/dev/null || true)

          # DEEP hygiene in data/: allow only data/<subrepo>/** for current subrepos (and data/.gcskeep)
          while IFS= read -r uri; do
            [[ -z "$uri" ]] && continue
            [[ "$uri" == "${BUCKET}/data/.gcskeep" ]] && continue
            keep=false
            for sub in "${subrepos[@]}"; do
              case "$uri" in
                "${DATA_ROOT}/${sub}/"* ) keep=true; break ;;
              esac
            done
            if [[ "$keep" == false ]]; then
              echo "Deleting stray under data/: $uri"
              gsutil -m rm -r "$uri" || true
            fi
          done < <(gsutil ls -r "${BUCKET}/data/**" 2>/dev/null || true)

          set +x
          echo "Final listing:"
          gsutil ls -r "${BUCKET}/dags/"   || true
          gsutil ls -r "${BUCKET}/data/"   || true
          gsutil ls -r "${BUCKET}/config/" || true
          echo "âœ… Mirror complete."
